// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace singleY_mis_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "examples/singleY_mis/singleY_mis.stan");
    reader.add_event(42, 40, "end", "examples/singleY_mis/singleY_mis.stan");
    return reader;
}

class singleY_mis_model : public prob_grad {
private:
    int N;
    int K;
    vector<int> N_mis;
    vector<double> param_mu;
    vector<double> param_nu;
    vector<double> param_sigma;
    vector_d obs_early;
    vector_d obs_mid;
    vector_d obs_late;
    vector<double> y;
public:
    singleY_mis_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    singleY_mis_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "singleY_mis_model_namespace::singleY_mis_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("N_mis", "K", K);
            context__.validate_dims("data initialization", "N_mis", "int", context__.to_vec(K));
            validate_non_negative_index("N_mis", "K", K);
            N_mis = std::vector<int>(K,int(0));
            vals_i__ = context__.vals_i("N_mis");
            pos__ = 0;
            size_t N_mis_limit_0__ = K;
            for (size_t i_0__ = 0; i_0__ < N_mis_limit_0__; ++i_0__) {
                N_mis[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("param_mu", "K", K);
            context__.validate_dims("data initialization", "param_mu", "double", context__.to_vec(K));
            validate_non_negative_index("param_mu", "K", K);
            param_mu = std::vector<double>(K,double(0));
            vals_r__ = context__.vals_r("param_mu");
            pos__ = 0;
            size_t param_mu_limit_0__ = K;
            for (size_t i_0__ = 0; i_0__ < param_mu_limit_0__; ++i_0__) {
                param_mu[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("param_nu", "K", K);
            context__.validate_dims("data initialization", "param_nu", "double", context__.to_vec(K));
            validate_non_negative_index("param_nu", "K", K);
            param_nu = std::vector<double>(K,double(0));
            vals_r__ = context__.vals_r("param_nu");
            pos__ = 0;
            size_t param_nu_limit_0__ = K;
            for (size_t i_0__ = 0; i_0__ < param_nu_limit_0__; ++i_0__) {
                param_nu[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("param_sigma", "K", K);
            context__.validate_dims("data initialization", "param_sigma", "double", context__.to_vec(K));
            validate_non_negative_index("param_sigma", "K", K);
            param_sigma = std::vector<double>(K,double(0));
            vals_r__ = context__.vals_r("param_sigma");
            pos__ = 0;
            size_t param_sigma_limit_0__ = K;
            for (size_t i_0__ = 0; i_0__ < param_sigma_limit_0__; ++i_0__) {
                param_sigma[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("obs_early", "(N - get_base1(N_mis,1,\"N_mis\",1))", (N - get_base1(N_mis,1,"N_mis",1)));
            context__.validate_dims("data initialization", "obs_early", "vector_d", context__.to_vec((N - get_base1(N_mis,1,"N_mis",1))));
            validate_non_negative_index("obs_early", "(N - get_base1(N_mis,1,\"N_mis\",1))", (N - get_base1(N_mis,1,"N_mis",1)));
            obs_early = vector_d(static_cast<Eigen::VectorXd::Index>((N - get_base1(N_mis,1,"N_mis",1))));
            vals_r__ = context__.vals_r("obs_early");
            pos__ = 0;
            size_t obs_early_i_vec_lim__ = (N - get_base1(N_mis,1,"N_mis",1));
            for (size_t i_vec__ = 0; i_vec__ < obs_early_i_vec_lim__; ++i_vec__) {
                obs_early[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("obs_mid", "(N - get_base1(N_mis,2,\"N_mis\",1))", (N - get_base1(N_mis,2,"N_mis",1)));
            context__.validate_dims("data initialization", "obs_mid", "vector_d", context__.to_vec((N - get_base1(N_mis,2,"N_mis",1))));
            validate_non_negative_index("obs_mid", "(N - get_base1(N_mis,2,\"N_mis\",1))", (N - get_base1(N_mis,2,"N_mis",1)));
            obs_mid = vector_d(static_cast<Eigen::VectorXd::Index>((N - get_base1(N_mis,2,"N_mis",1))));
            vals_r__ = context__.vals_r("obs_mid");
            pos__ = 0;
            size_t obs_mid_i_vec_lim__ = (N - get_base1(N_mis,2,"N_mis",1));
            for (size_t i_vec__ = 0; i_vec__ < obs_mid_i_vec_lim__; ++i_vec__) {
                obs_mid[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("obs_late", "(N - get_base1(N_mis,3,\"N_mis\",1))", (N - get_base1(N_mis,3,"N_mis",1)));
            context__.validate_dims("data initialization", "obs_late", "vector_d", context__.to_vec((N - get_base1(N_mis,3,"N_mis",1))));
            validate_non_negative_index("obs_late", "(N - get_base1(N_mis,3,\"N_mis\",1))", (N - get_base1(N_mis,3,"N_mis",1)));
            obs_late = vector_d(static_cast<Eigen::VectorXd::Index>((N - get_base1(N_mis,3,"N_mis",1))));
            vals_r__ = context__.vals_r("obs_late");
            pos__ = 0;
            size_t obs_late_i_vec_lim__ = (N - get_base1(N_mis,3,"N_mis",1));
            for (size_t i_vec__ = 0; i_vec__ < obs_late_i_vec_lim__; ++i_vec__) {
                obs_late[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<double>(N,double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"K",K,0);
            current_statement_begin__ = 5;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"N_mis[k0__]",N_mis[k0__],0);
            }
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"param_nu[k0__]",param_nu[k0__],0);
            }
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"param_sigma[k0__]",param_sigma[k0__],0);
            }
            current_statement_begin__ = 12;
            current_statement_begin__ = 13;
            current_statement_begin__ = 14;
            current_statement_begin__ = 15;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 18;
            validate_non_negative_index("mis_early", "get_base1(N_mis,1,\"N_mis\",1)", get_base1(N_mis,1,"N_mis",1));
            num_params_r__ += get_base1(N_mis,1,"N_mis",1);
            current_statement_begin__ = 19;
            validate_non_negative_index("mis_mid", "get_base1(N_mis,2,\"N_mis\",1)", get_base1(N_mis,2,"N_mis",1));
            num_params_r__ += get_base1(N_mis,2,"N_mis",1);
            current_statement_begin__ = 20;
            validate_non_negative_index("mis_late", "get_base1(N_mis,3,\"N_mis\",1)", get_base1(N_mis,3,"N_mis",1));
            num_params_r__ += get_base1(N_mis,3,"N_mis",1);
            current_statement_begin__ = 21;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 22;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~singleY_mis_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mis_early")))
            throw std::runtime_error("variable mis_early missing");
        vals_r__ = context__.vals_r("mis_early");
        pos__ = 0U;
        validate_non_negative_index("mis_early", "get_base1(N_mis,1,\"N_mis\",1)", get_base1(N_mis,1,"N_mis",1));
        context__.validate_dims("initialization", "mis_early", "vector_d", context__.to_vec(get_base1(N_mis,1,"N_mis",1)));
        vector_d mis_early(static_cast<Eigen::VectorXd::Index>(get_base1(N_mis,1,"N_mis",1)));
        for (int j1__ = 0U; j1__ < get_base1(N_mis,1,"N_mis",1); ++j1__)
            mis_early(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mis_early);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mis_early: ") + e.what());
        }

        if (!(context__.contains_r("mis_mid")))
            throw std::runtime_error("variable mis_mid missing");
        vals_r__ = context__.vals_r("mis_mid");
        pos__ = 0U;
        validate_non_negative_index("mis_mid", "get_base1(N_mis,2,\"N_mis\",1)", get_base1(N_mis,2,"N_mis",1));
        context__.validate_dims("initialization", "mis_mid", "vector_d", context__.to_vec(get_base1(N_mis,2,"N_mis",1)));
        vector_d mis_mid(static_cast<Eigen::VectorXd::Index>(get_base1(N_mis,2,"N_mis",1)));
        for (int j1__ = 0U; j1__ < get_base1(N_mis,2,"N_mis",1); ++j1__)
            mis_mid(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mis_mid);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mis_mid: ") + e.what());
        }

        if (!(context__.contains_r("mis_late")))
            throw std::runtime_error("variable mis_late missing");
        vals_r__ = context__.vals_r("mis_late");
        pos__ = 0U;
        validate_non_negative_index("mis_late", "get_base1(N_mis,3,\"N_mis\",1)", get_base1(N_mis,3,"N_mis",1));
        context__.validate_dims("initialization", "mis_late", "vector_d", context__.to_vec(get_base1(N_mis,3,"N_mis",1)));
        vector_d mis_late(static_cast<Eigen::VectorXd::Index>(get_base1(N_mis,3,"N_mis",1)));
        for (int j1__ = 0U; j1__ < get_base1(N_mis,3,"N_mis",1); ++j1__)
            mis_late(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mis_late);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mis_late: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(K));
        vector_d beta(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mis_early;
            (void) mis_early;  // dummy to suppress unused var warning
            if (jacobian__)
                mis_early = in__.vector_constrain(get_base1(N_mis,1,"N_mis",1),lp__);
            else
                mis_early = in__.vector_constrain(get_base1(N_mis,1,"N_mis",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mis_mid;
            (void) mis_mid;  // dummy to suppress unused var warning
            if (jacobian__)
                mis_mid = in__.vector_constrain(get_base1(N_mis,2,"N_mis",1),lp__);
            else
                mis_mid = in__.vector_constrain(get_base1(N_mis,2,"N_mis",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mis_late;
            (void) mis_late;  // dummy to suppress unused var warning
            if (jacobian__)
                mis_late = in__.vector_constrain(get_base1(N_mis,3,"N_mis",1),lp__);
            else
                mis_late = in__.vector_constrain(get_base1(N_mis,3,"N_mis",1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(K,lp__);
            else
                beta = in__.vector_constrain(K);

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 25;
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            (void) x;  // dummy to suppress unused var warning

            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);


            current_statement_begin__ = 26;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_max(get_base1(N_mis,1,"N_mis",1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        mis_early, 
                        "assigning variable x");
            current_statement_begin__ = 27;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_min((get_base1(N_mis,1,"N_mis",1) + 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        obs_early, 
                        "assigning variable x");
            current_statement_begin__ = 28;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_max(get_base1(N_mis,2,"N_mis",1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        mis_mid, 
                        "assigning variable x");
            current_statement_begin__ = 29;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_min((get_base1(N_mis,2,"N_mis",1) + 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        obs_mid, 
                        "assigning variable x");
            current_statement_begin__ = 30;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_max(get_base1(N_mis,3,"N_mis",1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        mis_late, 
                        "assigning variable x");
            current_statement_begin__ = 31;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_min((get_base1(N_mis,3,"N_mis",1) + 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        obs_late, 
                        "assigning variable x");

            // validate transformed parameters
            for (int i0__ = 0; i0__ < N; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(x(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 25;

            // model body

            current_statement_begin__ = 34;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 35;
                lp_accum__.add(student_t_log<propto__>(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "x"), get_base1(param_nu,k,"param_nu",1), get_base1(param_mu,k,"param_mu",1), get_base1(param_sigma,k,"param_sigma",1)));
            }
            current_statement_begin__ = 37;
            lp_accum__.add(normal_log<propto__>(beta, 0, 0.10000000000000001));
            current_statement_begin__ = 38;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 39;
            lp_accum__.add(normal_log<propto__>(y, multiply(x,beta), sigma));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mis_early");
        names__.push_back("mis_mid");
        names__.push_back("mis_late");
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("x");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(get_base1(N_mis,1,"N_mis",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(N_mis,2,"N_mis",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(N_mis,3,"N_mis",1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "singleY_mis_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d mis_early = in__.vector_constrain(get_base1(N_mis,1,"N_mis",1));
        vector_d mis_mid = in__.vector_constrain(get_base1(N_mis,2,"N_mis",1));
        vector_d mis_late = in__.vector_constrain(get_base1(N_mis,3,"N_mis",1));
        vector_d beta = in__.vector_constrain(K);
        double sigma = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < get_base1(N_mis,1,"N_mis",1); ++k_0__) {
            vars__.push_back(mis_early[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(N_mis,2,"N_mis",1); ++k_0__) {
            vars__.push_back(mis_mid[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < get_base1(N_mis,3,"N_mis",1); ++k_0__) {
            vars__.push_back(mis_late[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 25;
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "K", K);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            (void) x;  // dummy to suppress unused var warning

            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);


            current_statement_begin__ = 26;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_max(get_base1(N_mis,1,"N_mis",1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        mis_early, 
                        "assigning variable x");
            current_statement_begin__ = 27;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_min((get_base1(N_mis,1,"N_mis",1) + 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        obs_early, 
                        "assigning variable x");
            current_statement_begin__ = 28;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_max(get_base1(N_mis,2,"N_mis",1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        mis_mid, 
                        "assigning variable x");
            current_statement_begin__ = 29;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_min((get_base1(N_mis,2,"N_mis",1) + 1)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        obs_mid, 
                        "assigning variable x");
            current_statement_begin__ = 30;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_max(get_base1(N_mis,3,"N_mis",1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        mis_late, 
                        "assigning variable x");
            current_statement_begin__ = 31;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_min((get_base1(N_mis,3,"N_mis",1) + 1)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        obs_late, 
                        "assigning variable x");

            // validate transformed parameters
            current_statement_begin__ = 25;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(x(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "singleY_mis_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= get_base1(N_mis,1,"N_mis",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mis_early" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(N_mis,2,"N_mis",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mis_mid" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(N_mis,3,"N_mis",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mis_late" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= get_base1(N_mis,1,"N_mis",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mis_early" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(N_mis,2,"N_mis",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mis_mid" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= get_base1(N_mis,3,"N_mis",1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mis_late" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef singleY_mis_model_namespace::singleY_mis_model stan_model;

